"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const ast_utils_1 = require("../utility/ast-utils");
const config_1 = require("../utility/config");
const find_module_1 = require("../utility/find-module");
const parse_name_1 = require("../utility/parse-name");
function getModuleNameFromPath(host, modulePath) {
    if (!host.exists(modulePath)) {
        throw new schematics_1.SchematicsException(`File ${modulePath} does not exist.`);
    }
    const text = host.read(modulePath);
    if (text === null) {
        throw new schematics_1.SchematicsException(`File ${modulePath} cannot be read.`);
    }
    const sourceText = text.toString('utf-8');
    const source = ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
    return ast_utils_1.getFirstNgModuleName(source);
}
function stripTsExtension(path) {
    if (!path.endsWith('.ts')) {
        throw new schematics_1.SchematicsException(`File ${path} is not a Typescript file.`);
    }
    return path.substr(0, path.length - 3);
}
function default_1(options) {
    return (host, context) => {
        let providedByModule = '';
        let providedInPath = '';
        const workspace = config_1.getWorkspace(host);
        if (!options.project) {
            options.project = Object.keys(workspace.projects)[0];
        }
        const project = workspace.projects[options.project];
        if (options.path === undefined) {
            options.path = `/${project.root}/src/app`;
        }
        if (options.module) {
            const modulePath = find_module_1.findModuleFromOptions(host, options);
            if (!modulePath || !host.exists(modulePath)) {
                throw new Error('Specified module does not exist');
            }
            providedByModule = getModuleNameFromPath(host, modulePath) || '';
            if (!providedByModule) {
                throw new schematics_1.SchematicsException(`module option did not point to an @NgModule.`);
            }
            const servicePath = `/${options.path}/`
                + (options.flat ? '' : core_1.strings.dasherize(options.name) + '/')
                + core_1.strings.dasherize(options.name)
                + '.service';
            providedInPath = stripTsExtension(find_module_1.buildRelativePath(servicePath, modulePath));
        }
        const parsedPath = parse_name_1.parseName(options.path, options.name);
        options.name = parsedPath.name;
        options.path = parsedPath.path;
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            options.spec ? schematics_1.noop() : schematics_1.filter(path => !path.endsWith('.spec.ts')),
            schematics_1.template(Object.assign({}, core_1.strings, { 'if-flat': (s) => options.flat ? '' : s }, options, { providedIn: providedByModule, providedInPath: providedInPath })),
            schematics_1.move(parsedPath.path),
        ]);
        return schematics_1.mergeWith(templateSource)(host, context);
    };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,